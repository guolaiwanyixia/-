 ascll 有最多256个字符      美国佬只用128个字符（因为他们是英文128就结束了）
byte = 8bit

double  x = 3d （d=double）和float的 f一样
 前面ox代表十六进制
前面0代表八进制

（ 任意基本类型 ）     强制转换
byte,short,char         计算式先转化为int类型


复合赋值运算符会进行类型转换       byte b = 3 ；   b += 2；//等价于b=（byte）（b+2）；底层有一个类型转换
                                                                                        //b++   b=（byte）（b+1）；
""+x        就是把基本类转成字符串，显示就是粘贴类型
int   x  =   integer parseInt(" x ")    
         这是字符串转成基本类

String all = name + "\t"+ age + "\t" + score + "\t" +
	 gender +  "\t" + hobby;
他后面可以用 + 来用制表符

Integer.parseInt 把Object向下类型转成int
int age = Integer.parseInt(properties.get("age")+"");

基本数据类型转成字符串
String x = “123”；
字符串转成基本类型
int  y = Integer.parseInt（x）；// 就等于把“123”转成了123数字 
字符串转成字符  
char gender = myScanner.next().charAt(0)   把第一个变量转成字符

1.public  2. protected   3. 默认   4. private          修饰符有四种

类的五大类   ： 1. 属性 2.方法 3.构造器 4.代码块 5.内部类





包类型
import java.util.Scanner     引入java.util下面的Scanner

import java.util.*；             引入java.util下面的所有类

import java.util.Arrays        引入数组排序     
Array.sort（ ）                    调用数组排序
com.xxxx.xx          




单分支if  （   ）{                     多分支  else if
         （嵌套） if（ ）{                                                      嵌套尽量不超过三次，可读性不好  
     }else{
}
}


switch( x ){          书写格式 ↓            一般是byte，short，int，char，string，enum（枚举）↓
     	case 'x'  :         ‘x’+x也可以← 也是常量表达式      case后的类型要和switch一致，只能是常量和常量表达式
     	System.out.println(" x ");     
         break;
       .......
         default：
               System.out.println(" x ");

for循环控制                               
for(i =1; i <=10; i++ ){                                for（ x1，x2  ；；x3，x4）
        "   x   "         
  }

/*     增强for循环        集合和数组才能用
  for(i : 10){                     
        System.out.println(i);
         }      */ 错


while循环（和for的区别是 while执行完成就不在执行 除非加 个清零
int i = 1; 
        while(i <= 10){
        	System.out.println("你好" + i);
        	       i++;
        }

        System.out.println("程序结束");
 }
	


do..while循环控制（又和while差不多）先显示一次，再来循环
int i = 1; 
        do{
        	System.out.println("测试" + i);
        	   i++;
        }while(i <= 20);



跳转控制语句  break    continue    return

 for( int a = 0 ; a <= 10 ; a++){                        和随机抽签游戏一样
System.out.println((int)(Math.random( ) * 100) + 1);      随机数*100 +1

label02：                    在程序段的前面套标签

label01：                  ←标签的意思

   System.out.println(total);     break要放下面

      break；（默认返回离最近的标签label01）

continue   跳过下面程序直接执行下次循环


  return     返回mian方法


double [ ] i = { 1,2,3.....      }             数组
double[ ] kun = {3,5,1,3.4,2,50,100};     tip（[ ] kun和kun[ ] 是一样的）
      for(int i = 0;i<kun.length;i++){               数组变量名    kun.length  是自动算出数组里面有多少个量
      	totalkun+=kun[i];
      }
 System.out.println("总和是"+totalkun+"平均数是"+totalkun/kun.length);


方法重载

 方法名：必须相同             name（    ）
形参列表：必须不同         int    double ......            （个数，顺序，至少有一样不同的，参数名无要求）
返回类型：无要求            void   int ......

可变参数
int ...  类似数组      ...  ←符号    就等于（0 - 多） 如果有多个形参，必须放在最后



继承

相当于数控车床字母程序高级版本，先创建父类
1.创建父类 里面包含你所要有的子类的共同信息    比如小学生考数学，大学生也考数学，这2个相同的信息就放在父类
2.自己想要的不同信息格子放在子类
3.创建一个主方法调用     直接new子类即可
super的条件是↓
super( )是构造器中默认的，会自动先执行父类 
super（xx）如果要输入必须放在第一行，和this不能公用只能存在一个在构造器中

                                                                                                                                                                                          //主方法格式         com.fanyan.Exdents.son s = new son( );  需要调用包名
子类格式           public class son extends grandson                   公共类要加extends    继承     



Object类型
基本类型      指的是值
引用类型      指的是地址

==             可以判断引用类型和基本类型
equals        可以判断引用类型       如果是object是比引用类型

instanceof     比较操作符     比较运行类型

 tostring( )           默认情况是输出 包名+类名+哈希代码16进制
System.out.println(test002);         输出引用类型的名字默认调用    tostring方法 
             ↑重写完 就可以改变    输出 的格式和内容

Finalize              垃圾回收方法
可以手动调用   System.gc（）主动触发垃圾回收机制

过关斩将思维        可以先找出错误的，剩下的就都是正确的；






class AA  这个类里面的方法无法直接在别的类调用

class static AA   可以在别的类直接调用







代码块 格式   {                }
 用于构造器里面有重复的信息时，可以在代码块里面输入信息。
1. 只会在调用构造器时调用，会优先输出代码块里面的内容，再执行方法；
2.new 一个对象时也会调用，因为new一个对象时，就有一个新的构造器、

静态代码块 格式 static{             }
静态代码只会在类加载时调用，以下是三种类加载情况 ↓

1.new 一个对象时会调用
2.new 一个子类对象时会先调用父类的 静态代码块（如果父类有）
3.使用静态属性和方法时，也会调用静态代码块

对比2个，         普通代码块 被创建一次就会调一次
                        静态代码块只会被调用一次
                        同时存在并调用时会先执行静态代码块然后再执行普通代码块，再执行构造器
          继承的话，顺序是 👇  
 1.new一个类
2. public void  xx(){
     先调用父类，先执行父类的构造器  👉 1. super();
                                                              2.调用代码块
                                                            3.执行本方法语句
}




单例模式  1 .饿汉式 2. 懒汉式
饿汉式在类加载就new一个对象了
懒汉式在调用方法时才new一个对象，但是不完善*（以后学了线程再回来写）




abstract    抽象修饰词  如果使用抽象词，那么类也必须改成抽象类
抽象格式 就是      方法去掉括号   例如 public abstract void  xx( );
抽象类不能被实例化       可以做一个抽象模板模式     利用继承和动态绑定机制，简化重复的代码              
abstract     只能修饰类 和方法
如果一个子类继承了某个抽象父类，就得在子类重写所有父类方法，或    子类也设置为抽象类就不用写
private  final  static  都不能来修饰，因为都违背了重写







final             最终修饰词             定义后写上后无法修改，重写等，其内容
一般格式为  大写  XX—XX来命名
修改普通属性   只能在以下几种方法中↓             ↓修改静态属性   只能在以下几种方法中
                                       1.构造器           不能在构造器里 
                                       2.代码块                1.←
                                       3.定义时                2.←

final类 不能被继承 但是可以new对象
父类的final方法 不能重写，修改，但是可以new子类使用父类final方法







static    name      类变量名      类变量名随着类的加载而创建，所以即使没有new对象访问也可以访问
类变量名的正规格式是   举例   public static name 
变量三       =   要素 变量名+值+数据类型
1.静态方法只能访问静态属性和方法     如果想要访问非静态方法，要先实例化一个对象。new一个对象，再调用。
2.非静态方法可以访问非静态属性和方法    以及  静态属性  和静态方法
3.在编写代码时，任然要遵守访问的权限规则；





interface     接口  调用格式     public class  xxxx  implement   xxxx{    }
 接口里有三种方法👇                 在接口里写抽象方法可以省略抽象关键字  接口也可以继承
 1.抽象方法                             在接口中所有成员都是静态性质的
2.默认实现方法    default
3.静态方法          static

下面是个人想法↓

  相似处分析
  1.都有抽象方法格式
  2.都要写继承+父类名        或者写执行+接口名
  3.都要重写父类的抽象方法    或者重写接口方法
 
 分析接口
  1.接口就相当于数据线 里面要创建很多的类似与  规格和信号的线子    要连接电脑usb的插口
  2.使用数据线的各个类，如同电子产品一样，像手机，相机，都有一个插孔匹配数据线，所以里面的
  规格，和型号都要和数据线一样，要重写数据线，插入数据线要输入接入数据线importments的名字
  3.这时有一台电脑的主接口要调用数据线的各种规格和信号，并且要数据线插入电脑里，也就是创建总类接收插口信息
  4.此刻连通了数据线 电脑里有一个主方法指令要获得手机类的信息，所以得先创建好对应的驱动也就是new
  手机类，此刻要通过调用电脑的主接口  来传入手机类的名字来获取手机里各种的参数的信息






局部内部类

外部方法里的类
局部内部类可以直接访问外部类的方法和属性，而外部类访问内部类得new一个访问。
如果局部内部类和外部类的属性名字重名时，默认究竟原则，如果想访问外部类成员可以使用 外部类名.this.属性使用


匿名内部类

  匿名内部类格式            可以用  接 口名  编译名   = new 接口名（）{       方法          }；
                                     也可以用   类名    编译名   = new  类名 （）{       方法          }；
                                      也直接可以        new 类名 （）{       方法          } . 方法  ；
可以out  {getClass（）   }             来调用 匿名的底层名字    发现是       类名$
1.本质是类  2.内部类 3.该类没有名字 4.同时还是一个对象


成员内部类
在成员位置的内部类可以当作成员方法直接new 就可以被调用

静态成员内部类
基本和 ↑ 一样




枚举
枚举对象名字，通常全部大写
就是指在类里面new自己的内容，全部列举好之后，static final     mian直接调用即可

自定义枚举类
格式：public static final 类名  形参名 = new  类名( " ",构造器内容    )
1.构造器私有化
2.创建本类内部一组对象
3.对外部public 对象 public static final
4.可以提供get方法，但不能提供set方法

关键字枚举类   enum{ }
格式：形参名( "   "  ,构造器内容  )  ↓ 必须要有属性
            属性 
1.使用enum 替代 class
2.如果有多个对象使用，即可
例如：形参名( "   "  ,构造器传参内容  )，形参名( 构造器传参内容  ).......       用，可以在后面再加对象
4.如果使用enum必须将 对象放到最上面
5.如果使用无参构造器    对象格式可以为     形参名      ← 就这个

各种重写父类Enum的方法

1.返回方法名           枚举类名.方法名.name（）；
2.返回编号               枚举类名.方法名.ordinal( )；
3.返回全部方法名             枚举类名[ ] 形参名 = Season.values();
           for(枚举类名 i :形参名){                     ←增强for循环   数组才能用
               System.out.println(i);
           }
4.返回枚举里是否有方法            枚举类名  形参名 = 枚举类名.方法名.valueOf("这里面输入方法名")；
                                                out   输出         形参名 == 枚举类名        对比是否存在在枚举里
5.返回 枚举类方法   2个对比结果 第一名字的数组位   -  第二个名字的数组位          Season.WINTER.compareTo(Season.what)
6.  tostring重写
 




注解：          
注解可以检验
1.@Override                  重写注解    只能在方法上使用
2.@Deprecated              过时注解       表示该元素过时了，不推荐使用，但仍然可以使用
3.@SuppressWarnings     抑制警告信息注解         抑制警告  
格式@SuppressWarnings （   {    “ x  ” }     ）      x=all   抑制全部   


元注解：       修饰注解的注解叫元注解










异常处理：    Exception
一般分为   编译器异常  和  运行异常
可以用try - catch 异常处理机制来解决
格式：try {
        →报错语句      System.out.println(num1/num2);

        } catch (java.lang.Exception e) {       如果没有异常 catch就不执行

        e.printStackTrace();    这一行也可以改成右边的比较简单     System.out.println(e.getMessage());
        }finally{
          不管有没有发生异常，都得执行finally
}

如果一段代码有多个异常

格式：try {
        →报错语句      System.out.println(num1/num2);

        } 

catch（）{ }         ← 必须是子类异常在前面   父类   Exception在后面  
catch（）{ }         ←   

catch (java.lang.Exception e) {       如果没有异常 catch就不执行

        e.printStackTrace();    这一行也可以改成右边的比较简单     System.out.println(e.getMessage());
        }finally{
          不管有没有发生异常，都得执行finally
}

也可以用try--finally格式
try{  }
finally{  }  必须执行



throws  抛出异常处理给上一级
抛出异常处理给上一级，可以抛出多个异常
可以   throws  Exception 父类   子类都能
throws  如果抛出编译异常，必须加try-catch ， 或者继续加throws



自定义异常
thorws   是方法用的
thorw    是变量用的
可以自定义异常  thorw  new  （自定义）Exception
格式：                                               如果是继承 Exception 一般是编译异常 ↓用下面这个比较好，不然还要在上一级thorws
先建一个自定义的类  名字+Exception类 entends  RuntimeException 一般是继承运行异常
里面加一个有参构造器
然后在主方法里new 自定义类 传一个 参数 然后抛给jvm机处理




常见的五大异常

1.空指针异常  null pointer exception
2.数学异常
3.数组下标越界异常
4.类型转换异常
5.数字格式不正确异常






  包装类 Wrapper   

Integer                                  
   属性↓         对象↓              ==基本类型比的是值
 基本类型                             ==如果比的是对象 就看是不是同一个运行类型
     int         Integer            Integer.valueOf（ ）值的范围在-128~127之间  超过就会new一个新的对象
   double    Double
    .....


String
底层是final类型的char[ ]  value;
1.串行化
2.比较类型          x.intern 指的是常量池地址
可以调用各种方法在java截图里面有
x.concat（“yyy”）.concat（“yyy”）....      可以拼接各个字符
x.replace（“y1”，“y2”）     可以把y1替换y2
.......    各种截图里有



StringBuffer          用于多线程
 st...buffer的对象可以串行化
 new  StringBuffer（ yyy）可以从y指定大小

调用拼接字符方法
格式 ：先...= new  StringBuffer（“yyy”）
x.append（yyy）.append（"yyy"）....      append 是拼接字符方法，底层是用String.valueOf（....）←各种类型的int，double...转化为String字符

调用删除字符方法
格式 ：先...= new  StringBuffer（“yyy”）
x.delete（11，14）                 删除字符下标为11~14之间的字符*（不包含14）

调用替换字符方法
格式 ：先...= new  StringBuffer（“yyy”）
x.replace（9，11，“王力宏”）               把9~11的位置替换为王力宏

调用查找字符方法
格式 ：先...= new  StringBuffer（“yyy”）
x.indexOf （“王力宏”）             看看有没有王力宏这个字符，如果有，就把他第一字的下标位置写出，没有则返回-1

调用插入字符方法
格式 ：先...= new  StringBuffer（“yyy”）
x.insert（9，“王力宏”）               在9的位置插入王力宏字符，原先下标为9的字符向后移动

调用字符长度方法
格式 ：先...= new  StringBuffer（“yyy”）
x.length（）              查找一共有几个字符

.........   还有很多  

常调用的方法

char[] chars = str.toCharArray()    把 String转为char[ ]
char [ ] 里面的元素可以不用遍历直接输出

int i = email.indexOf('@')    写出@的下标位置

String[] s = str.split(" ");   分割符号  空格就分割 
String.format("%s %s .%c", s[2], s[0], s[1].toUpperCase().charAt(0));       格式
toString方法 可以不用for循环 输出数组内容




StringBuilder          用于单线程

和上面方法使用都一样






Math
各种方法查找jdk即可




Arrays


Arrays.sort   从小到大排序

Arrays.binarySearch（arr，x）    二叉查找
如果是无序的话，就不能使用

Arrays.copyOf（arr，x）  复制数组

Arrays.fill（arr，99）填充数字   arr里面的数全部替换为99

Arrays.equals（arr，arr2）比较2个数组是否相等

各种查找jdk即可




System

退出方法
System.exit（0）    表示程序退出       0表示正常退出





BigInteger       大整数类型   
 new  BigInteger（传入000....）                      非常大的数用这个方法
   new  BigInteger（传入000）.add（传入另一个000）   加法
                                         .....加减乘除
                                     add ,  subtract , multiply , divide




BigDecimal      大小数类型
new BigDecimal （传入0.0....）
和上面一样  加减乘除方法
 格式：↓           会保留原有的几位小数
bigDecimal.divide(bigDecimal2,BigDecimal.ROUND_CEILING)    如果有无限循环就使用





Time

第一代日期类：

Date     日期         
Date date = new Date();       
Date date1 = new Date(999999);      可以用毫秒指定时间

SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 hh:mm:ss E");       改变格式
String format = sdf.format(date);
System.out.println(format);     输出当前格式的当前日期

第二代日期类：

Calendar   日历       
格式：↓
      调用   Calendar c  = Calendar .getInstance（） 
sout （   c.get（Calendar.MONTH）+1 ）    MONTH要+1 以为从0开始计算的
sout （   c.get（Calendar.YEAR ） ）                输出 年
   c.get（Calendar.HOUR_OF_DAY ）     切换24小时制  
                                        .....年月日时分....

第三代日期类：
LocalDate(年月日)
LocalTime(时分秒)
LocalDateTime(年月日/时分秒)

可以先指定一个   private LocalDate date 属性

public myDate(int year, int month, int day) {
        this.date = LocalDate.of(year, month, day);
    }
在构造器里直接传给 LocalDate 


调用方法         LocalDateTime now = LocalDateTime.now()
                        now.getMonth()   可以调用当前月份
                          ......    年月日时分秒      都可以调用
 LocalDateTime now = LocalDateTime.now()      获取当前年月日时分秒       
DateTimeFormatter.ofPattern("yyyy年MM月dd日 hh:mm:ss E")        改变格式
String f = dateTimeFormatter.format(now)          调用方法传入现在的时间
out    f     输出


String     反转
char[] chars = str.toCharArray(); 把string转成数组






集合
Collection






List接口方法↓   [  单列 ]


 iterator  迭代器      主要用于遍历集合中的元素


调用方法
list.add  添加一个元素
......看截图


ArrayList at = new ArrayList()    先new一个 ArrayList()
 Iterator ir = at.iterator();             再调用迭代器方法
    while (ir.hasNext()){                 hasNext()  检查有没有下一个元素，如果没有返回false
           Object ob = ir.next();        ir.next()     调用下一个元素
           System.out.println(ob);
       }                   
     ir = at.iterator();    重置方法          如果想再输出，就重置

增强for循环   集合和数组都能用    效果和上面一样    增强for他的底层任然是迭代器

数组增强for格式
int arr[]= {1,2,5,6};
        for (int i :arr) {
            System.out.println(i);
        }


集合增强for格式
ArrayList at = new ArrayList();    这里的ArrayList可以换成 接口
        at.add("jack");
        at.add(10);
        at.add(true);
        for (Object b:at) {
            System.out.println(b);
        }


at.addAll（ ）         添加一个集合
at.get（ ）             查找下标位置 的元素
at.indexOf（ ）      查找元素的 下标位置
at.lastindexOf（ ） 查找最后元素的下标位置   如果集合当中有2个同样的元素，取后者
at.remove（ ）       删除当前下标位置的元素  或  输入元素直接删除
at.set（ ）              输入下标，再输入新元素 替换 掉当前下标位置的元素
at.subList（ ）        输入开始下标，再输入最后的下标   返回 例如 0 - 2 之间的元素    返回下标0，1 不包括2   
at.size（ ）             数组大小
at.substring(0,15)    输出字符串0-15之间的字符

ArrayList，LinkedList，Vector   都能用上面的方法



双向链表     LinkedList     
1→2→3             结构就是这样
1←2←3


LinkedList
 先new LinkedList
linklist.add（ ）  添加双向链表
linklist.remove（ ）  删除第一个链表
linklist.set（ ）  修改链表
linklist.get（ ）  查找链表




Set接口方法↓  


HashSet

1.没有顺序
2.不允许添加重复元素
3.如果重复，就不会添加
4.线程不安全

还有很多 Set接口实现类，方法.....   查api
 new HashSet ...


LinkedHashSet 
底层维护了一个数组 + 双向链表




Map接口方法↓    [  双列 ]

HashMap

1.没有顺序
2.不允许添加重复元素
3.如果key重复，就会修改前一个元素
4.线程不安全
HashMap hashMap = new HashMap();  
hashMap.put( 任何xx );  输入  key 和 value值     

调用Entryset      把Node 里的 k和V 装到 Entry里
调用Keyset         把Node 里的 k装到 Set里
调用Values         把Node 里的 v 装到 Collection里
Set   set  = map.entrySet（ ）；调用 这个方法  可以调k和v 的 单个属性
     遍历 set
 
 

Hashtable 

1.没有顺序
2.不能为null
3.如果key重复，就会修改前一个元素
4.线程安全（synchronized-同步的）



Properties      配置类

1.没有顺序
2.不能为null
3.如果key重复，就会修改前一个元素
4.线程安全（synchronized-同步的）



TreeSet  
1.没有顺序  （有比较器）（可以调用接口 排序）    可以可以调用Comparator匿名内部类接口，重写compare方法
2.如果key重复，就会修改前一个元素



Collections      工具类
Collections.reverse（）反转顺序
Collections.shuffle ( )   随机顺序
Collections.sort ( )        按自然大小顺序 **（a-z    1-....）
Collections.swap(a ，[ 0 ] [ 1 ] )    把下标0 和 1 的位置互换排序        
Collections.sort(l, new Comparator() {           自定义比较循序
            @Override
            public int compare(Object o1, Object o2) {
                return 0;                                   这里返回可以改成((String)o1).length()-((String)o2).length()  比较字符的长度顺序
            }                                                                                                     ......各种的比较自定义
        });
Collections.max ( )   按自然顺序的最大值 
Collections.min ( )   按自然顺序的最小值 
Collections.frequency( 集合形参名 ，指定的查找元素 )    指定集合中某字符的统计次数
Collections.copy （ 旧的，新的 ）    拷贝旧集合 赋给新集合  （拷贝旧数组 要比原数组要大或相等）
 Collections.replaceAll(集合形参名,"a","b")      把集合里的 a 换成 b




generic       泛型
格式：ArrayList<xxx>  a=new ArrayList<xxx>( )             <这里是泛型>
 可以简写 ArrayList<xxx>  a=new ArrayList<>( )         
1.能对加入的类型进行约束
2.遍历的时候可以之间用xxx类型获取，不用Object向下转型了

在创建类的时候可以用<E>来表示泛型
格式：
ArrayList <Carr>list = new ArrayList<Carr>();         先指定Arraylist 转成 carr类
        list.add(new Carr<String,Integer>("宝马",400000));    再new carr类的时候指定什么类型的数据
        list.add(new Carr("宾利",5000000));


class Carr<E,Q>{
    private E name;
    private Q price;

    public Carr(E name, Q price) {
        this.name = name;
        this.price = price;
    }

自定义泛型
1.不能用数组初始化
2.静态方法中不能用泛型
3.不输入泛型，默认为Object类型
4.泛型方法可以在普通类定义方法 
格式：public<T, R >  void fly（T t，R r）{        }
           定义泛型↑                泛型方法↑
5.泛型通配符  <?>  这个代表支持任意泛型类型  
list <?>                代表任意类型的list类型
<? extends AA>   这个代表 AA 的子类类型  
<? super BB>       这个代表 AA 的父类类型  



JUnit
为了方便测试这个方法能不能使用可以直接
@Test 
     方法 


画图
 一个类继承 java里的 JPanel 类 
重写paint方法
@Override                    
    public void paint(Graphics g) {
        super.paint(g);
    }

java事件处理机制
格式：
class MyPanel extends JPanel implements KeyListener     在面板上实现接口KeyListener     监听器
 @Override
    public void keyPressed(KeyEvent e){           KeyEvent是指键盘事件
}
1.当事件源 产生一个事件，可以传送给事件监听者
2.监听者得继承Frame


进程：

进程是指，打开 一个程序的进行过程，运行过程
例如：打开下载器，就等于启动的一个进程
          只要下载器不关闭，就一直在运行状态，这种状态叫做进程过程


线程：
线程是由进程创建的，是进程的一个实体，或执行进程的一段程序
一个进程可以拥有多个线程
当一个程序启动后，就会开启了一个主线程，主线程里可以开启子线程，主线程和子线程交替执行叫并发

例如：打开下载器，下载一个文件，就等于创建了一个线程
                                                             创建一个就是单线程
                                                             创建多个就是多线程

线程的基本使用

继承Thread 类 ，重写run方法
当一个类继承Thread 类，该类就可以当做线程使用
格式：
在主方法里new类，调用类名.start（）方法，可以开始线程
里面的run方法 如果不是无限循环的话只会执行一次


2.实现Runnable，重写run方法


线程常用方法：
Thread.currentThread( ).getName ( )        获取当前线程名称
Thread.sleep（x）休眠 x毫秒 （1秒=1000毫秒）
Thread.setName   设置线程名字
Thread.getName   得到线程名字
Thread.run              运行run方法         
Thread.setPriority    更改优先级
Thread.getPriority   得到优先级 
Thread.interrupt       中断线程     中断线程后不停止进程，一般用于中断休眠           
run方法退出              可以通过变量控制循环 
yield                         礼让，让出cpu让其他线程执行，礼让不一定成功 
join                           线程插队，A1线程里如果有A2.join方法，他会在执行到
                                这一行的时候自动到A2方法执行，执行完毕后才会回到
                                A2.join方法下面的代码
thread.setDaemon    守护线程    子线程被设置成守护状态，主线程执行完，子线程就
                                会强制结束
Synchronized         互斥锁        是非公平锁  
1.同步方法如果没有使用static修饰，默认对象为this
2.如果方法有static修饰，默认对象  当前类名.class
3.要求多个线程的锁对象必须为同一个
线程同步机制     
保证线程在任何同一时刻，最多有一个线程访问                       
非静态锁  可以是this的，也可以是其他对象的
如果在非静态类， 用  Synchronized代码块就要写     synchronized（ this ）{   }

静态锁      是当前类本身   类名.class
如果在静态类， 用  Synchronized代码块就要写     synchronized（ 类名.class）{   }
死锁         A B 两线程全部blocked主了

释放锁
1.同步代码块执行结束
2.同步代码块遇到 break ，return  
3.出现 异常
4. 执行了wait （）方法
5.
不会释放锁  
1.调用Thread.sleep ，Thread.yield   方法暂停
2.调用suspend（）方法 把线程挂起
tip ： 因避免使用 suspend（），resume（）来控制线程，不推荐使用



并发：
指的是同一时刻多个任务交替执行，会处理完第一个在处理第二个
单核cpu实现的多个任务就是并发

并行：
指的是同一时刻多个任务同时执行，多核cpu可以实现并行，也可同时并发和并行



IO流
文件流：
           输 入 流
java程序   ←    文件
（内存）   → （磁盘）
           输 出 流

File

new File     创建文件对象相关方法
1.  File file1 = new File("D:\\");                   new File( String类型的硬盘名+文件类型名 )
调 file.createNewFile();方法
                                     这里的 \\  也可以写成/
2.  File file1 = new File("D:\\");                   new File( File 硬盘名   + String类型的文件类型名 )
         String file2 ="abcd.txt" ;
        File file3 = new File(file1,file2);
      调 file3 .createNewFile();方法
3.   String parentPath= "D:\\";
          String fileName= "abcde.txt";
        File file4 = new File(parentPath,fileName);
file4.getName()              获取文件名字
file4.getAbsolutePath()    文件绝对路径
file4.getParent()               文件父级目录
file4.length()                    文件内容字节
file4.exists()                      文件是否存在
file4.isFile()                       是不是一个文件
file4.isDirectory()              是不是一个目录

常用的文件操作
file4.mkdir()                    创建一级目录
file4.mkdirs()                    创建多级目录

FileInputStream  输入流 (字符)                  读取文件内容，
FileInputStream fileInputStream = new FileInputStream(filePath);
read = fileInputStream.read();     

                          输出流                  如果路径没有就会创建新的内容
 String filePath = "D:\\AA.txt";             String有个方法    str.getBytes()  把字符串转成字节数组             
 FileOutputStream fileOutputStream = null;         
fileOutputStream = new FileOutputStream(filePath);
fileOutputStream.write('H');                     可以写单个字符
 //fileOutputStream.write(str.getBytes());  可以直接一个字符串转字节数组变量

FileReader可以读取字符
fileReader = new FileReader(filePath);

访问数组
ByteArrayInputStream/ByteArrayOutputStream
CharAarryReader/CharAarryWriter




处理流（包装流）（字节处理）
BufferedReader/BufferedWriter
先把要读写的文件导入路径
在写到另一个路径下面
br = new BufferedReader(new FileReader(FilePath));
bw = new BufferedWriter(new FileWriter(destFilePath,true));

对象流
要声明类实现了serializeble接口才能序列化
把对应的值和数据类型保存下来称为：序列化
恢复对应的值和数据类型称为：反序列化
ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filePath));
oos.writeInt(100);
oos.writeUTF("韩顺平");
oos.writeObject(new dog("旺财",10));
如果需要在反序列化中调用序列化类的方法，需要把序列化的类放到可引入的位置


节点流和处理流细节
1.读写顺序要一致
2.序列化和反序列化的类，要实现Serializable接口
3.如果想在类里面加新东西，可以写（ private static final ） long serialVersionUID = 1L;系统序列化时就会不会识别新改的对象
4.序列化对象时默认所有属性序列化，除了static，transient

转换流
BufferedReader  br = new InputStreamReader (new FileInputStream(filePath),"gbk");
把字节流文件转成gbk的字符流，再用BuffReader读取
InputStreamReader ut = new InputStreamReader(new FileInputStream(Path), font);
 BufferedReader br = new BufferedReader(ut);


OutputStreamwrite
String Path="D:\\qqq.txt";
String font = "gbk";
OutputStreamWriter or = new OutputStreamWriter(new FileOutputStream(Path),font);
or.write("hello,world韩顺平!");
System.out.println("文件转换成功");
or.close();

打印流      只有输出，（没输入流）：(
PrintStream
PrintStream out = System.out;

        out.print("韩顺平教育");  print 底层是write（）用out.write（“韩顺平教育”.getBytes( ) );
        out.close();
可以修改打印流输出的位置/设备
System.setOut(new PrintStream("D:\\www.txt"));  这个方法是修改输出位置
        System.out.println("11111");


PrintWriter     打印写入

PrintWriter pr = new PrintWriter(new FileWriter("D:\\eee.txt"));
     pr.println("hi,韩顺平你好");
pr.close();


Properties类        //1.使用Properties 类，可以读写配置文件
增删改查
  Properties properties = new Properties();
        //设置
        properties.setProperty("charSet", "utf8");         设置默认修改
        properties.setProperty("user", "汤姆");
        properties.setProperty("pwd", "abc111");
//输出
        properties.store(new FileOutputStream(          
                "src\\mysql.properties"), "11");
        System.out.println("ok!");
-------------
        Properties properties = new Properties();
        properties.load(new FileInputStream("src\\re.properties"));//读写配置
        String classfullpath = properties.get("classfullpath").toString();//读写classfullpath信息
        String method = properties.get("method").toString();//读写method信息






ip地址：主机的 唯一表示  （类似于身份证，和地址）
ipV4 :  四个字节（32位）十进制
    192.168.16.69     前面2位是网络地址，后2位是主机地址
一个字节的范围 0 ~ 255  十六进制
ipV6：16个字节（128位） （逐渐替换ipV4，因为不够用了）

域名：  为了方便记忆将IP地址映射成域名，HTTP协议                  
端口号：识别计算机某个特定的网络程序                                           
              端口范围  2个字节（0~65535）（0~2^16-1）                                     
              0~1024已经被占用                                                           
网络协议：约定俗成的意思， 比如  吃饭，这个词本身没有含义，                                                             
但是大家约定俗成，说吃饭就知道是吃饭这个动作                   
                                                                                                                                                                                                                                                              
                                                                            
TCP协议 （传输前，采用三次握手）   
Transmission Control Protocol   (传输控制协议)     
1.是可靠的                           
2.适合大数据传输                       
3.效率低                                         
                

UDP协议
User Datagram Protocol    (用户数据协议)    
1.大小限制 64K，不适合大量数据
2.不可靠
3.速度快
 
InetAddress 类                                                                                             通过域名获取服务器ip
InetAddress.getLocalHost( )                                                                          获取本机的InetAddress   对象
InetAddress.getByName( "DESKTOP-PJAAP7E" )                                           通过本机名字  获取本机的InetAddress   对象
InetAddress byName1 = InetAddress.getByName( "www.baidu.com" )         根据域名返回 InetAddress   对象
byName1.getHostAddress( )                                                                        通过InetAddress对象   获取对应的地址
String hostName = byName1.getHostName()                                              通过InetAddress对象   获取对应的主机名/域名

Socket  套接字
1.开发网络应用程序被广泛使用
2.通信的两端都有Socket
3.网络通信其实就是Socket间的通信
4.Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输
5.一般主动发起的通信是客户端，等待通信为服务端

TCP编程   
流输入完，必须要刷新并写入结束标记
bufferedWriter.flush()
socket.shutdownOutput();
netstat指令 （dos控制台下执行）
netstat -an   可以查看主机网络情况
netstat -an | more    可以分页显示 （按回车显示下一行）
                                                    （按空格显示下一页）
netstat -anb             查看是什么本机软件在监听




UDP编程
DatagramSocket socket = new DatagramSocket(9998);
DatagramPacket Packet = new DatagramPacket(bytes, bytes.length);

ConcurrentHashMap 集合
ConcurrentHashMap,可以处理并发的集合，没有线程安全

reflection   反射
ocp原则（开闭原则：不修改源码，扩展功能）

反射机制
//使用反射解决问题

1.加载类，返回Class类型的对象cls
Class cls = Class.forName(classfullpath);

2.通过cls得到加载的类 com.fanyan.Cat
Object o = cls.newInstance();
System.out.println("运行类型o"+o.getClass());

3.通过cls得到加载的com.fanyan.Cat的method的方法对象
在反射中，可以把方法视为对象(万物皆对象)
Method method1 = cls.getMethod(method);

通过method 调用方法:即通过方法对象来调用方法
method1.invoke(o);        传统方法  对象.方法() , 反射机制 方法.invoke(对象)

优化执行速度
method.setAccessible(true);        取消检测      设置为真就代表   反射调用方法时取消检测


MySql  数据库

DBMS 数据管理系统













二进制转十进制                         
x*2的（位数-1）次方            
八进制转十进制                     
x*8的（位数-1）次方
十六进制转十进制
x*16的（位数-1）次方

十进制转二进制                
一直除以2，得到的余数就是二进制的值，然后从后往前排序
八进制      同上
一直除8
十六进制   同上
一直除16

二进制转8进制
把二进制从左到右每三位一组   例如：101，101，101      把每一组转成对应的十进制相加就得到了八进制 
二进制转16进制
每四位一组  ，  同上

八进制转二进制     
例如0237         把每一位上的数转成 3位 为一组的  2进制    假设转成101，101，101
十六进制转二进制
例如0237      把每一位上的数转成  4位  为一组的  2进制     假设转成1011，1011，1011


原码，反码，补码
负反码转负补码=取反+1  ， 补码转反码就是逆向操作，先-1在取反
例子：（反码转补码）
1000 0001        （此时是原码）     //先取反再+1
1111 1110         （此时是反码）
1111 1111        （此时是补码） 补码=反码 + 1
此时我想再转回原码
1111 1111          （此时是补码）补码 - 1 =反码
1111 1110          （此时是反码） 
1000 0001          （此时是原码）


编写项目层
class 里面无法调用东西，只能在void方法和void main 方法里面调用东西，
class 可以定义基本属性类型，而且根据类型可以互相使用属性，比如   int  a；
void方法里面可以设置自己方法里的属性，但是只有自己方法里能使用。
在void的方法里 优先调用传入的参数
奇数  数组  冒泡的时会空指针异常












