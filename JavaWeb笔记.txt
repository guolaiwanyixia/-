Server                  S            服务器
Serve里包含：
Tomcat[Web服务器 + 容器 ]                             
Tomcat里包含：
Web服务
容器

和 database             db          数据库

browser        简称 b           浏览器
1.地址 http://www.xx.com/login

B/S架构      前端browser   和服务器端Server组成的系统框架结构
                  也可理解为web架构，包括 前端 后端 数据库 三大部分

结构HTML                    是网页内容载体，内容就是网页制作者放在页面上想要被用户看见的信息
           （HyperText Nark-up Language） 超文本标签语言

表现 CSS                       网页的外衣  字体，颜色变化，背景图片，边框等，改变内容外观

行为  JavaScript JQuery    用来实现网页上的特效效果，鼠标滑过弹出的下拉菜单，购物网站的图片轮转有动画


HTML文件书写规范：
<!--          -->

<!--文档类型说明 注释-->
<!DOCTYPE html>
<!--表示语言的地区 en 表示英国美国-->
<html lang="en">
<!--头-->
<head>
<!--  设置字符集-->
  <meta charset="UTF-8">
<!--  文件标题-->
  <title>李俊杰</title>
</head>
<!--主体内容-->
<body>
  hello,韩顺平教育

</body>
</html>           


HTMl 标签 <> 两个 尖括号 括起来
一般是双标签 <b></b> 前一个是起始标签，后一个为结束标签
字符实体:
<hr/>          横线
<br>       换行
<h1>标签1</h1>       标签 1是最大字体  依次往后排
align：                                                                    对齐属性                                  
align="center"                                                     字符对齐中间



特殊字符：
&lt;        文本的< 符号
&gt;        文本的> 符号            在这两个符号中间 可以写任意字符 都是文本
&nbsp     空格

&lt;123&gt;
超链接标签:
<a>             标签是超链接
href =" "      属性设置连接
target=" "    设置哪个目标进行跳转
_self:            表示把当前页面,替换到超链接 ( 默认值 )
_blank:         打开并跳转新页面
<a href="https://www.bilibili.com/" target="_blank">bilibili2</a>
<a href="mailto:tom@sohu.com" >联系管理员</a>                     发送邮箱

无序列表：
<ul>                                                   ul： 表示无序
  <li type="circle">jack</li>                li :   列表项实心圆       type="circle"  表示空心圆
  <li>tom</li>                                    type属性：指定列表项的符号
  <li>smith</li>                                            
  <li>mary</li>                              
</ul>

有序列表:
<ol  type="A">                 以字母形式排序
<ol type="A" start="3">   以C字母形式排序

图像标签：
<img src="近代史纲要20240513105209.png">   img 图片标签，用来显示图片
width:           设置宽度
height:          设置高度
border="10px"    设置边框
alt                  如果路径没有找到图片就会显示这个
<img src="近代史纲要20240513105209.png"width="400" height="1000">  建议只设置一个,系统会自动调整

表格标签：
tr     行标签
th     表头标签  
td     单元格标签
align   单元格对齐
b         加粗
px       像素
colspan=" "         横行合并yy格子
rowspan="3"       竖行合并yy格子
border    边框宽度
cellspacing          指定单元格空隙
bordercolor         指定表格边框演示
height                 指定 高度
<table width="500px" border="1">          表格标签  

表单：
form      表示表单
submit    提交方式
value       文字
action     提交到哪个页面
method="get"     不写默认是get

<form action="ok.html" method="get">        
用户名:<input type="text" name="username"><br>
密　码:<input type="password" name="password"><br>
   <input type="submit" value="登录">   <input type="reset" value="重新填写">
如果用户名密码文字对不齐    把输入法变成全角，按空格就行了


<h1>登陆系统</h1>
<form action="ok.html" >
  用户名:<input type="text" name="username"><br>
  密　码:<input type="password" name="password"><br>
  <input type="submit" value="登录"> <input type="reset" value="重新填写">
</form>

表单综合练习：
checkbox  多选   
radio    单选
checked    默认选中钩子
type="checkbox"     勾选项类型   如果是多选框  name要保持一致
 <input type="checkbox" name="sport" value="lq">篮球<br>          正真提交给服务器的是value里面的
<select >      下拉菜单 
  option        下拉菜单选项
textarea        文本域
row 行
cols  列
type="file"      选择文件
border="1"                      线条
cellspacing="0"                线条间隙
 <textarea rows="6" cols="20"></textarea> 

<input type="file" name="myfile">     选择你的文件

表单细节：
   表单  提交的是  name里面的字符
get 提交   
1.不安全
2.有数据长度限制(不同的浏览器规定不一样，一般2k)
3.浏览器地址中会显示参数

post请求
1.浏览器地址只有action属性值，提交的数据是携带在http请求中的
2.相对于get是安全的
3.理论上没有数据长度的限制

div标签:
div是一个块级元素，他的内容自动得开始一个新行
<a>  是超链接标签      
href="http://www.baidu.com"       跳转到指定的页面
<a href="http://www.baidu.com">goto 百度</a>

p标签和span标签：
 <p>     标签定义段落
  p       元素会自动在其前后创建一些空白
span     可以单独设置某些数字样式
您购物车有<span style="color: red;font-size: 40px">10</span>个商品  
style="color: red;font-size: 40px"      红色   字体40px
















常用符号：
<i>                                                                        斜字体
<b>                                                                      粗字体    
 <hr/>                                                                  横线
<br/>                                                                  换行
<font  ↓  >xxx</font>                                         颜色
<body bgcolor="aqua">                                   背景颜色
  color="blue" size="40px" face="微软雅黑"          color 属性 颜色，size 文本大小   ，face  修改字体
<meta charset="UTF-8">                                    设置字符集
<h1> xxx 1</h1>                                                标签 1是最大字体  依次往后排
align：                                                                    对齐属性                                  
align="center"                                                     字符对齐中间
.                                                                          表示当前文件所在的目录
..                                                                          当前目录的上一级目录
border="1"                      线条
bordercolor
cellspacing="0"                线条间隙
http://Ip地址:port/工程名/资源路径            绝对路径URL     http://localhost:63342/html/.idea/homework/1.png 

     

          
CSS

Cascading Style Sheets       简称CSS        层叠样式表
  可以使内容和样式分开操作     
格式:
  <style type="text/css">                      进入css里
    div{                                                  可以在css里单独控制 div  的各种参数 
      width: 300px;
      height: 100px;
      background-color: beige;
    }
  </style>

字体颜色和边框:
color: 可以用  英文 ，十六进制，和rgb（z,z,z）
solid      实线
dashed   虚线
background-color               背景颜色  


边框格式：
border-width:10px 1px 5px 20px         边框设置顺序是 上右下左

 div{
      width: 300px;                            width:  的值可以是确定的，也可以是百分比的  50%;
      height: 100px;
       border: 1px solid blue;          
     
    }

 div{
     font-size:40px;                     font-size指定大小
     font-weight: bold;             font-weight指定是否粗体
      font-family: 新宋体;          font-family指定字体类型

margin-left: auto;                       margin-left     移动到最右边
      margin-right: auto;                margin-right移动到最左边            如果2者都存在就会居中       auto是自动的意思
  
text-align: center;                    text-align  文本居中
    }

去掉超链接下划线：

<a href="https://www.baidu.com">百度</a>      跳转到百度

  <style type="text/css"> 
a{
  text-decoration: none;          文本装饰    设置为 不添加     就取消了下划线
}

  </style>

表格细线：
table,tr,td{                                  把table,tr,td 全部都选中
   width : 500px;
  border : 1px solid black;              
 border-spacing : collapse;           border-spacing : collapse    间距设置为0
}


去掉无序列表的样式：

ul{

   list-style: none;        

}

css使用方式：
span     专门设置字体的

引入外部css文件：
<link rel="stylesheet"     type="text/css"  href="./my.css"/>         可以不写type
 <link rel="stylesheet"  href="./my.css"/> 可以不写type        
 link可以引入 外部css文件       relation 关联  stylesheet      href 引入路径

id选择器:
  在元素中定义  id=" " 
   然后可以用id在css中直接使用    指定的时候要加# {   }    

类选择器：
统一修饰用元素选择器

单一选择用id选择器

要分批选择用类选择器
<div  class="css1">          用class来指定同一类的属性
  hello,北京~
</div>
                         在css里要用  .指定的名称     比如  .css1

组合选择:
三种选择器  可以全部都在一起使用
行内修饰 > id > class > 元素选择器

文本大写字母开头    text-transform:capitalize  --

Java Script:

console.log ( ) 输出内容       
alert ( )  输出内容                    两个都可以用




格式：
<script type=" text/javascript">
   
      var age = 10;
      console.log("name=" + age);                                  javaScript 是弱类型，不怎么严谨
      console.log(typeof age); //输出变量的类型                 
      age = "北京";                                                 typeof age 输出类型
      console.log(typeof age);
  </script>

可以在body和head嵌入script

引入js文件：
  <script type=" text/javascript" src="js-use.js">            src = js文件名

  </script>

普通格式和引入格式只能二选一不能混用

用调试器发现错误：
浏览器 ctrl + shift + i 可以打开浏览器调试器

js的数据类型：                            
number       数值类型
string            字符串
object           对象
boolean        布尔
function         函数

特殊值：                                                            例：
undefined            未定义的值，没有赋值就输出了      a ;
null                         空                                            a= null;     
NaN                    Not a Number 不是一个数字         a = a * "你好"   ；
 
js运算符：
+ - * / %  ++ -- 
赋值运算符：
=  +=  -=  *=  /=  %=
关系运算符
==  === 全等(值和数据类型)   != >  <  >=   <=

例子：
a = "100"
b = 100

console.log(a==b)   true        比值
console.log(a===b)   false     值和类型

逻辑运算符：           
&&        and           
||             or             
!             not            

注意事项：
0  null  undefined   ""  NaN    都是false
&&  
所有的值都可以当布尔值使用

数组：
和java一样        

a = new Array( );

数组遍历：
和java一样

console.log会自动换行
格式↓
for ( i = 0; i < a.length; i++) {
      alert(a[i])
    }

函数：
< button >   按钮

function  hi( ){            定义一个函数   
alert("hi !~")                               如果不调用函数那么就不会执行
}

定义的名字 x( )        主动调用

<button onclick="hi()">点击这里</button>   在button里绑定了一个 onclick事件 ，用户点击了该button就会触发hi( )函数

js函数定义的方式：
第一种：
   function hi1(){        
     alert("hi~")
   }

第二种：
function hi2(name){
     alert("你的名字是"+name)
   }

   hi2("李俊杰")              后定义

第三种：
 function hi2(name,name2){
     return name+name2
   }

   alert(hi2("李俊杰","林俊杰"))          返回值，要放在alert中

js函数定义的第二种方式：
第一种：
 f1 = function hi1( ){                把函数赋给 变量
     alert("hi~")
   }
     f1( );        调用变量

第二种：
f1 = function hi1(name){
     alert("hi~"+name)              同样都是传形参
   }
     f1("李俊杰");

第三种：
return...

js函数注意事项和细节：
  function f2 ( ){
      console.log(arguments)       系统默认有一个arguments  可以接收新参，不管你函数有没有
      alert("f2")
    }
    f2(10,120,1203);             传入了形参，但是函数并没有对应的东西接收，




 function f2(n){
      console.log(arguments)              n变成10       arguments   包含全部  10,120,1203         
      alert(n)
    }
    f2(10,120,1203);

函数小练习：
 function f2(){
  res = 0
     for (i = 0; i < arguments.length; i++) {
       if(typeof (arguments[i]) == "number"){            过滤掉非数字的 类型
         res += arguments[i]
       }
     }
     return res
   }
  alert(f2(1,2,null,3,"dada",4,5))

object定义的对象：
 var person = new Object();
  person.name ="韩顺平";
  person.age =20;                                  定义2个对象
  person.say =function(){                  定义一个函数对象
    console.log(this.name +this.age)         
  }
  person.say();                   调用函数对象
 
使用{ } 定义对象：
var person = {
    name:"老韩",                          在{ } 里定义属性和函数   然后在外面调用
    age:20,
    hi:function (){
      console.log(this.name + this.age)        
    }
  }
  console.log(person.name+person.age)
  person.hi()

事件:
事件的注册    把button 和 函数关联起来 这个过程就是注册（叫绑定也可以）
静态注册：在设置的时候就和函数绑定在一起了
<body onload="sayOK()">    

动态注册：      
window.onload = function (){                window.onload表示页面被加载完毕   
   alert("动态注册onload事件")              function ()表示加载完毕后，要执行的代码
 }

点击事件：
onclick  点击事件

静态：
 function sayOK(){
    alert("静态注册事件sayok")       直接在body里调用 <button onclick="sayOK()">sayOK按钮</button>
  }

动态：
<button id="btn01">sayHi</button>                   先写body  

window.onload = function (){                                                先加载页面，调用函数
 var btn01 = document.getElementById("btn01");                    函数里加载了映射button的对象 
  btn01.onclick= function (){                                                  通过button对象调用onclick方法
    alert("sayHi")                                                                       把函数要输出的东西和 按钮绑定   
  }
}

失去焦点事件：
onblur    失去焦点事件

静态绑定：
<input type="text" id="fname" onblur="upperCase()">     先写body      onblur="upperCase() 调用函数显示

  function upperCase(){                                                       写函数
       var fname = document.getElementById("fname");         得到input的对象
       fname.value = fname.value.toUpperCase();                  调用对象里的value 得到输入框的值，然后调用toUpperCase()转成大写
                                                                                           然后再发给  fname.value 输入框内             
   }
动态绑定：
<input type="text"  id="fname2" >      先写body

 window.onload = function (){                                                先加载页面，调用函数        
        var fname2  = document.getElementById("fname2")     得到input的对象
         fname2.onblur = function (){                                        调用对象里的onblur 方法 并绑定一个函数 
           fname2.value = fname2.value.toUpperCase();             函数和上面静态方法一样
          
         }


内容发生改变事件： 

onchange    改变事件
静态：
function mysal(){                        先写function
  alert("工资变化了")
}


<select onchange="mysal( )">                       调用 onchange="mysal()
  <option>--工资范围--</option>
  <option>2k-5k</option>
  <option>5k-10k</option>
  <option>10k以上</option>
</select><br/>

动态：

 window.onload = function (){
  var sel01 = document.getElementById("sel01")
   sel01.onchange = function (){
     alert("工zuo变化了")
   }
 }


表单提交事件：
静态：
onsubmit

<form action="OK.html" onsubmit="return register( )">            调用提交事件，并返回绑定的 register( ) 函数

function register(){     
 var username = document.getElementById("username")         通过名字得到对象
  var pwd = document.getElementById("pwd");                           
  if ("" == username.value || ""== pwd.value){                          判断输入框内 不能为空
  alert("用户名或密码不能为空")                                                 为空返回 False 给事件
    return false;
  }
return true
}

动态：
  <form action="OK.html"  id = "form2">     先写 id  

window.onload = function (){
  
var form2 = document.getElementById("form2");            通过id调用form对象
  form2.onsubmit = function (){                                       对象再调用事件      
     if(form2.username.value=="" | |form2.pwd.value==""){      通过调用对象里的  username，pwd 的对话框 的内容 的判断是否为空 
       alert("用户名或密码不能为空")
       return false;
     }
     return true
  }
}

注册用户作业：
  window.onload = function (){
    var from = document.getElementById("from");
    from.onsubmit = function (){
         if(!(from.username.value.length>=4 && from.username.value.length<=6)){
        alert("用户长度(4-6)不满足")
           return  false
         }
        if(from.pwd.value.length != 6){
        alert("密码长度(6)不满足")
          return  false
      }
       if( from.pwd.value != from.pwd2.value){
        alert("两次密码不相等")
         return  false
      }
     var emailPattern= /^[\w-]+@([a-zA-Z]+\.)+[a-zA-Z]+$/      通过正则表达式来检查格式是否正确
      if(!emailPattern.test(from.email.value)){
           alert("不满足邮箱格式")
        return false
      }


      return true

    }
  }


<h1>注册用户</h1><br>
<form id="from" action="OK.html">
用户名:<input name="username">用户长度(4-6)<br>
密　码:<input name="pwd">密码长度(6)<br>
确　认:<input name="pwd2"><br>
电　邮:<input name="email"><br>
<input type="submit" value="注册用户">
<input type="reset" value="重新输入">

dom介绍：
dom就是实现功能
Document Object Model    文档对象模型

应用实例：
function a(){
  var myHeader = document.getElementById("myHeader");
  alert(myHeader.innerText)             显示文本
  alert(myHeader.innerHTML)            显示页面上的文本

}



应用实例2：

<input type="checkbox" name="sport" value="zq" checked="checked">足球        3个勾选框必须名字要一样才能是为一组的
<input type="checkbox" name="sport" value="tq">台球
<input type="checkbox" name="sport" value="ppq">乒乓球
<br>
<button onclick="selectAll()">全选</button>
<button onclick="selectNone()">全不选</button>
<button onclick="selectReverse()">反选</button>


 function selectAll(){
      var sports = document.getElementsByName("sport");                通过名字得到 sport 的集群对象
      for (var i = 0; i < sports.length; i++) {                               通过checked  默认选中函数来遍历集群对象
        sports[i].checked = true;
      }


    }function selectNone(){
    var sports = document.getElementsByName("sport");
    for (var i = 0; i < sports.length; i++) {
      sports[i].checked = false;
    }

    }function selectReverse(){
    var sports = document.getElementsByName("sport");
    for (var i = 0; i < sports.length; i++) {
         sports[i].checked = !sports[i].checked                       把得到的结果反选，再赋给自己       很聪明的方法

    }

应用实例3：
function changImgs() {

    var img = document.getElementsByTagName("img");
    if (but1.value =="查看多少猫/并切换成狗") {
      alert("猫的数量是" + img.length)
      for (var i = 0; i < img.length; i++) {
        img[i].src = "猫狗图片/" + (i + 4) + ".png"
      }
        but1.value = "查看多少狗/并切换成猫"


    } else if (but1.value =="查看多少狗/并切换成猫") {
        alert("狗的数量是" + img.length)
        for (var i = 0; i < img.length; i++) {
          img[i].src = "猫狗图片/" + (i+1) + ".png"
        }
      but1.value = "查看多少猫/并切换成狗"

      }
    }
}

应用实例4：                       创建小猫
  function addImg(){
      var img = document.createElement("img");         通过 调用dom 来定义一个标签，但不影响静态html的内容
    img.src = "猫狗图片/1.png";                                    相当于不展示在body中，用内存
img.width = "100";                                           
      document.body.appendChild(img)                     把定义的src 传给body.appendChild 里

  }

  }
}

乌龟吃鸡游戏：
style="position: absolute;   绝对定位
left  横坐标
top  纵坐标

<div id="wugui" style="position: absolute;left:100px;top: 120px; ">
  <img src="1.bmp" border="1" alt="">

</div>
<div id="cock" style="left: 200px;position:absolutel;top: 200px; ">
  <img src="2.bmp" border="1" alt="">

XML:           文件类型
描述层级关系

格式：
1. xlm 表示文件类型 
2.version 版本
3.encoding   文件编码
4.students     root元素，根元素
5.student      是students的子元素
6.id就是属性  name ,age,gender  是student  元素的子元素   


<?xml version="1.0" encoding="utf-8" ?>  
<students>
    <student id="100">
        <name>jack</name>
        <age>10</age>
        <gender>男</gender>
    </student>

    <student id="200">
        <name>mary</name>
        <age>18</age>
        <gender>女</gender>
    </student>
</students>

xml格式：
中间如果要加‘ , ”        " x ' x "   ,   ' x " x '
如果想要把内容当作文本 格式：↓
                            <![CDATA[  xxx    ]]>



转移符:
&lt              <
&gt             >
&amp         &
&quot          "
&apos          '



Dom4j_     在java程序里调用xml： 
SAXReader reader = new SAXReader();      创建一个解析器
Document document = reader.read(new File("src/student.xml"));          通过xml得到对应的dom对象
 Element rootElement = document.getRootElement();                        通过dom对象得到对应的元素
Element student=(Element) rootElement.elements("student").get(0);  得到 student  标签对象
student.attributeValue("id")      通过 标签对象 得到对应的id



Tomcat:
先模拟一个tomcat，自己创建一个服务器接收：
ServerSocket serverSocket = new ServerSocket(9999);           创建一个服务器端口号为9999
        while (!serverSocket.isClosed()) {                  如果serverSocket 没关闭就一直循环
            System.out.println("等待连接...");            
            Socket socket = serverSocket.accept();                服务器等待接收信息
            OutputStream outputStream = socket.getOutputStream();     输出流
            outputStream.write("hello,iamtomcat".getBytes());                 输出字符串给连接上的那个客户端
        }
       

我先去复习IO：
1.文件输入流 和 文件输出流 
 File inpuyStream   and  File  outputStream  只能用byte[ ] 发送
 outputStream 写入文件时   内容时会覆盖原来的内容
可以在一开始的 new FileOutputStream（路径，true）  后面加一个true 代表 要追加写入， 不写默认是覆盖

1.1 在自己电脑上一个盘上 传大文件 到另一个盘 
 先输入在输出
确定好输入输出 路径  
File inpuyStream 输入进来 立马 FileOutputStream   输出

2. 文件字符流
FileReader       读写字符内容，接收的是int类型     如果要在屏幕上输出时，要转成char
























