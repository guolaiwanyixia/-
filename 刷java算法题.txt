集合：
HashMap 
1.不能重复，重复会覆盖
2.键值对
3.查找和插入速度快，无序
方法：
Map.getOrDefault(2，1)        获取存在的键    存在返回2    不存在返回1    


HashSet
1.不允许重复key
2.无序且查找速度快。

ArrayList
1.允许重复
2.随机访问速度快，但增加和删除元素可能需要数组复制，速度较慢

从算法中学到的一些新的东西：           【】      ：              
        
【加一】  digits [i]++                         把这个得到的值+1 ，并且赋给自己        
【旋转数组】   index = index  % length;  如果想要数字按顺序5671234排序，
可以用取模解决 4%7 等于4， 7 % 7等于0，8 %7等于1      取余数      
                       
【移动零】通过双指针
当你想要把数组的一些数按照某特定顺序移动的时候
使用 left   right   双指针

【有效的数独】
char转成int     字符转成十进制的int      （查询ascii码表即可）
减去字符‘0’就可以得到对应的十进制数      例如'3'-'0' = 3       原来字符'3' = 51 ，‘0’=48 
9宫格数独算法  int k = i / 3 * 3 + j / 3    把对应的下标控制在 固定的的九宫格当中     
 例：1 | 3                                                 0001
                  对应位只要有一个是 1，结果位就是 1。          0011
                                                                                  =0011
  k & line[i] 按位运算   同位置对比如果有一个是1 那就是1 ，如果有一个是0就是0
            如果两个相应的位都是 1，则结果位是 1。
            如果两个相应的位中至少有一个是 0，则结果位是 0。

 例：1<<3  就等于         原来 1 转成二进制是 0001       把0001移动三位
                                                                                                                     是 1000
【整数反转】int i = x % 10;             取某数的个位数 
if ((newRes - i) / 10 != res)        判断是否溢出了32位  
最大的整数首位是2：这里的说法是指，在不超出int类型范围的前提下，
我们可以构造的最大整数是 2999...999（共31个9）。
这是因为，如果首位是3，那么即使后面都是0，整数也已经超出了int类型的范围（3000...000即30亿，这已经大于2147483647）。
Integer.MAX_VALUE / 10           判断是否溢出了32位  
【字符串中唯一的字符】
 s.indexOf(s.charAt(i)) == s.lastIndexOf(s.charAt(i)     第一次下标的位置和最后一次下标的位置



一些方法：
Arrays.sort(nums);           排序
Arrays.toString(nums);    输出数组
s.toCharArray()               转成char数组
 s.charAt(i)                      转成char
Map.getOrDefault(2，1)        获取存在的键    存在返回2    不存在返回1    




